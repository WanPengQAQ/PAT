#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include <string.h>
#include<queue>

using namespace std;
#define MAX 15

struct node {
	int left, right;
};

int flag = 1;
void in_order(int Root, struct node a[]) 
{
	if (Root == -1)
		return;

	if (a[Root].left != -1)
		in_order(a[Root].left, a);

	
	if (flag == 1) {
		printf("%d", Root);
		flag = 0;
	}
	else
		printf(" %d", Root);
	


	if (a[Root].right != -1)
		in_order(a[Root].right, a);

}
void level_order(int Root, struct node a[])
{
	queue<int> q;
	q.push(Root);

	int flag = 1;
	while (!q.empty()) {
		int x = q.front();
		q.pop();
		if (flag == 1) {
			printf("%d", x);
			flag = 0;
		}
		else
			printf(" %d", x);

		if (a[x].left != -1)
			q.push(a[x].left);

		if (a[x].right != -1)
			q.push(a[x].right);

	}
	printf("\n");
}
void InvertTree(int Root, struct node a[])
{
	if (Root == -1)
		return;
	
	int temp = a[Root].left;
	a[Root].left = a[Root].right;
	a[Root].right = temp;

	InvertTree(a[Root].left, a);
	InvertTree(a[Root].right, a);
	
}
int main()
{
	int N;
	scanf("%d", &N);

	struct node a[MAX];
	
	char temp[3];
	int isRoot[MAX];
	for (int i = 0; i < N; i++)
		isRoot[i] = 1;
	for (int i = 0; i < N; i++) {
		scanf("%s", temp);//左
		if (temp[0] >= '0' && temp[0] <= '9') {
			a[i].left = temp[0] - '0';
			isRoot[a[i].left] = 0;
		}
		else
			a[i].left = -1;
		
		scanf("%s", temp);//右
		if (temp[0] >= '0' && temp[0] <= '9') {
			a[i].right = temp[0] - '0';
			isRoot[a[i].right] = 0;
		}
		else
			a[i].right = -1;
	}

	int Root;
	for (int i = 0; i < N; i++)
		if (isRoot[i] == 1) {
			Root = i;
			break;
		}

	//invert Tree
	
	InvertTree(Root, a);

	level_order(Root, a);

	in_order(Root, a);
	system("pause");
	return 0;
}
